hlibc

DESCRIPTION:
------------

	hlibc is an experimental libc targeted at the linux kernel's syscall
	ABI. It is a standalone libc which supports the i386, x86_64 and arm 
	architectures. hlibc can be compiled with either gcc or the llvm
	clang compiler.


BUILDING:
---------

	hlibc contains a shell wrapper for gcc called `gcc-wrap`. This allows it 
	to be easily installed and used from your home directory without the 
	need for root privilege.

		cd hlibc 
		./configure --prefix=/home/$USER/buildarea 
		make 
		make install

	Test the installation:

		cd /home/$USER/buildarea 
		./bin/gcc-wrap tests/pow_test.c

	hlibc only supports static linking at this time.


		hbox/
			A small busybox like set of POSIX utilities.

		tests/
			A set of C run time tests.


AUTOMATIC TESTING:
------------------
	
	Use the following instructions to retrieve, build and run hlibc 
	and the hlibc test suite.

		git clone https://git.zv.io/r/hlibc.git
		cd hlibc
		make gcctest

	If all ran successfully there should be no significant errors and
	a confirmation notice containing the results of the test suite 
	will be printed to screen looking something like this:

		==========COMPILING TESTS ===================================
		=============================================================
		==========TEST RESULT START==================================
		This number should be (16.000000): 16.000000    (4^3)
		This number should be (15.580524): 15.580524    (3.3^2.3)
		The `cat' utility successfully copied a file
		The `malloc_driver' test utility successfully iterated thro ...
		The `popen_driver' test utility successfully ran `du' on a  ...
		The `printf_driver' test utility successfully created and c ...
		The `popen-to-file' driver test utility successfully ran `d ...
		============================================================

	If any compiler or linker errors occur within this report then the libc
	has changed and likely regressed or otherwise lost a functionality.

	If you wish to add a new test to the test suite simply put the program
	under tests/ and it will be compiled along with the other tests. To
	have the test automatically ran with the hlibc testsuite then add the
	title of its binary to BASIC_TESTS= at the top of tools/build.sh. This
	method is for tests that produce output as stdout and are then compared
	with the output of the same test compiled against the host. If the test
	does not use stdout or is unsuitable for running against the host as a
	control medium then it must be scripted into ./tools/build.sh by hand.

	Two duplicate test directories are created with the test suite, These
	duplicate test directories are compiled against the default host libc
	and used as control mediums to diff the output of the same tests
	compiled against hlibc:

		control/*.c (links to tests/*.c)
		hbox-control/*.c (links to hbox/*.c/)


USING LLVM/CLANG:
-----------------

	Clang does work with hlibc. However, the wrapper script is still
	experimental. It can be automatically tested by running;

		make clangtest


ROADMAP:
--------

	Add time() and random() so that the arbsh/arbprec library can be built
	using hlibc.

	Write more tests in C, add them to tests/ and script them into build.sh

	Add an fdopen() function and redesign popen() to use it. 

	Redesign the syscall interface to use unique code and start removing the
	remnants of musllibc/.

	Rewrite getopt(), write tests for getopt(). This getopt version was
	written by Henry Spencer and is not unique to hlibc.

	Address proper switching between unbuffered, line buffered and buffered
	modes inside of _fillbuf.c and _flushbuf.c. Register them before main
	and then with the internal exit() function.

	Fix the experimental MIPS port. Popen and stat are not working 
	correctly.

	Finish the aarch64 port.
	

REVISION CONTROL:
-----------------

	https://github.com/cmgraff/hlibc


DEVELOPERS:
-----------

	One of the simplest ways to contribute to hlibc is to make patches
	using `git'. They can be constructed as follows:

		git add src/path/to/work.c
		git commit -m "something new added"
		git format-patch -1 --stdout > work.patch


WEB HOME:
---------

	http://www.csit.parkland.edu/~cgraff1/hlibc


CONTACT:
--------

	cm0graff@gmail.com


IRC:
----

	#hlibc on irc.freenode.net


RELENG:
-------

	A release can be engineered by running:

		make release RELENG="hlibc-0.1x" \
		RELENG_MIR="http://mirror/" \
		RELENG_DIR="public_html/" \
		RELENG_SSH="user@host:www"


REFERENCES:
-----------

	https://www.corsix.org/content/converting-floats-to-strings-part-1

	https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html

	https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options

	http://lolengine.net/blog/2011/12/21/better-function-approximations
    
	http://lolengine.net/blog/2011/9/17/playing-with-the-cpu-pipeline

	Russ Cox does really nice research on regular expressions:
	https://swtch.com/~rsc/regexp/regexp1.html


RELEASES:
---------

	http://www.csit.parkland.edu/~cgraff1/hlibc-0.1a.tar.gz

	http://www.csit.parkland.edu/~cgraff1/hlibc-0.1b.tar.gz

	http://www.csit.parkland.edu/~cgraff1//hlibc-0.1c.tar.gz
